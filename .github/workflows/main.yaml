name: Docker Image Scan

on: [push]

env:
  USER: "richarddrochner"

jobs:
  trivy_scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Use the GitHub username (actor)
          password: ${{ secrets.SOMEBOT_SECRET }}  # Use the secret token

      # Build the Docker image
      - name: Build the hello-docker Docker image
        run: |
          docker build -t ghcr.io/$USER/somebot:latest .

      # Install Trivy (Specific version v0.60.1)
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: latest # Specify the desired version


      # Scan the Docker image for vulnerabilities
      - name: Scan Docker image for vulnerabilities
        run: |
          trivy image --severity HIGH,CRITICAL --format json --output trivy_output.json ghcr.io/$USER/somebot:latest

      # Build the new Docker image with trivy_output.json
      - name: Build the new Docker image with trivy_output.json
        run: |
          docker build -t ghcr.io/$USER/somebot-with-trivy-output:latest -f Dockerfile.trivy-analysis .

      # Push the Docker image to GitHub Container Registry
      - name: Push the Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/$USER/somebot-with-trivy-output:latest

  bandit-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Use the GitHub username (actor)
          password: ${{ secrets.SOMEBOT_SECRET }}  # Use the secret token

      # Python code scanning with Bandit
      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit scan
        run: |
          mkdir -p security-reports
          bandit -r . -f json -o security-reports/bandit_report.json
          # Fail if high severity issues found
          bandit -r . -ll

      # push report to repo
  #    - name: Commit and push report
  #     env:
  #        GH_TOKEN: ${{ secrets.SOMEBOT_SECRET }}
  #      run: |
  #        git config --global user.name "richarddrochner"
  #        git config --global user.email "len_drochner@web.de"
  #        git remote set-url origin "https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }}.git"
  #        git add security-reports/
  #        git commit -m "Add security scan report [skip ci]" || echo "No changes to commit"
  #        git push

      # Docker image scanning with OWASP tools
      - name: Build Docker image
        run: docker build -t ghcr.io/$USER/somebot:latest .

      - name: Install OWASP Dependency-Check
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip openjdk-11-jre
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip
          unzip dependency-check-8.2.1-release.zip -d /opt
          rm dependency-check-8.2.1-release.zip

      - name: Run Dependency-Check on Docker image
        run: |
          docker save ghcr.io/$USER/somebot -o image.tar
          /opt/dependency-check/bin/dependency-check.sh \
            --scan image.tar \
            --project "MyApp" \
            --out ./reports \
            --format JSON \
            --format HTML

      # Upload all reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit_report.json
            reports/*

      # Download the reports
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: app/downloaded-reports/